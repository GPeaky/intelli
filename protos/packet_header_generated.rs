// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod protos {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod packet_header {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PACKET_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PACKET_TYPE: u8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_TYPE: [PacketType; 6] = [
  PacketType::car_motion,
  PacketType::event_data,
  PacketType::final_classification_data,
  PacketType::participants,
  PacketType::session_data,
  PacketType::session_history_data,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PacketType(pub u8);
#[allow(non_upper_case_globals)]
impl PacketType {
  pub const car_motion: Self = Self(0);
  pub const event_data: Self = Self(1);
  pub const final_classification_data: Self = Self(2);
  pub const participants: Self = Self(3);
  pub const session_data: Self = Self(4);
  pub const session_history_data: Self = Self(5);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::car_motion,
    Self::event_data,
    Self::final_classification_data,
    Self::participants,
    Self::session_data,
    Self::session_history_data,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::car_motion => Some("car_motion"),
      Self::event_data => Some("event_data"),
      Self::final_classification_data => Some("final_classification_data"),
      Self::participants => Some("participants"),
      Self::session_data => Some("session_data"),
      Self::session_history_data => Some("session_history_data"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PacketType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PacketType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PacketType {
    type Output = PacketType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PacketType {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PacketType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PacketType {}
pub enum PacketHeaderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PacketHeader<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PacketHeader<'a> {
  type Inner = PacketHeader<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PacketHeader<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PacketHeader { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PacketHeaderArgs<'args>
  ) -> flatbuffers::WIPOffset<PacketHeader<'bldr>> {
    let mut builder = PacketHeaderBuilder::new(_fbb);
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.add_type_(args.type_);
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> PacketType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PacketType>(PacketHeader::VT_TYPE_, Some(PacketType::car_motion)).unwrap()}
  }
  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(PacketHeader::VT_PAYLOAD, None)}
  }
}

impl flatbuffers::Verifiable for PacketHeader<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PacketType>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("payload", Self::VT_PAYLOAD, false)?
     .finish();
    Ok(())
  }
}
pub struct PacketHeaderArgs<'a> {
    pub type_: PacketType,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for PacketHeaderArgs<'a> {
  #[inline]
  fn default() -> Self {
    PacketHeaderArgs {
      type_: PacketType::car_motion,
      payload: None,
    }
  }
}

pub struct PacketHeaderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PacketHeaderBuilder<'a, 'b> {
  #[inline]
  pub fn add_type_(&mut self, type_: PacketType) {
    self.fbb_.push_slot::<PacketType>(PacketHeader::VT_TYPE_, type_, PacketType::car_motion);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PacketHeader::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketHeaderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PacketHeaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PacketHeader<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PacketHeader<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PacketHeader");
      ds.field("type_", &self.type_());
      ds.field("payload", &self.payload());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PacketHeader`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_header_unchecked`.
pub fn root_as_packet_header(buf: &[u8]) -> Result<PacketHeader, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PacketHeader>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PacketHeader` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_packet_header_unchecked`.
pub fn size_prefixed_root_as_packet_header(buf: &[u8]) -> Result<PacketHeader, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PacketHeader>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PacketHeader` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_header_unchecked`.
pub fn root_as_packet_header_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketHeader<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PacketHeader<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PacketHeader` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_header_unchecked`.
pub fn size_prefixed_root_as_packet_header_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketHeader<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PacketHeader<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PacketHeader and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PacketHeader`.
pub unsafe fn root_as_packet_header_unchecked(buf: &[u8]) -> PacketHeader {
  flatbuffers::root_unchecked::<PacketHeader>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PacketHeader and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PacketHeader`.
pub unsafe fn size_prefixed_root_as_packet_header_unchecked(buf: &[u8]) -> PacketHeader {
  flatbuffers::size_prefixed_root_unchecked::<PacketHeader>(buf)
}
#[inline]
pub fn finish_packet_header_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PacketHeader<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_header_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PacketHeader<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod packet_header
}  // pub mod protos

