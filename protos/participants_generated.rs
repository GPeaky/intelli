// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod protos {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod participants {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ParticipantDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ParticipantData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ParticipantData<'a> {
  type Inner = ParticipantData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ParticipantData<'a> {
  pub const VT_M_AI_CONTROLLED: flatbuffers::VOffsetT = 4;
  pub const VT_M_DRIVER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_M_NETWORK_ID: flatbuffers::VOffsetT = 8;
  pub const VT_M_TEAM_ID: flatbuffers::VOffsetT = 10;
  pub const VT_M_MY_TEAM: flatbuffers::VOffsetT = 12;
  pub const VT_M_RACE_NUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_M_NATIONALITY: flatbuffers::VOffsetT = 16;
  pub const VT_M_NAME: flatbuffers::VOffsetT = 18;
  pub const VT_M_YOUR_TELEMETRY: flatbuffers::VOffsetT = 20;
  pub const VT_M_SHOW_ONLINE_NAMES: flatbuffers::VOffsetT = 22;
  pub const VT_M_PLATFORM: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ParticipantData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ParticipantDataArgs<'args>
  ) -> flatbuffers::WIPOffset<ParticipantData<'bldr>> {
    let mut builder = ParticipantDataBuilder::new(_fbb);
    if let Some(x) = args.m_name { builder.add_m_name(x); }
    builder.add_m_platform(args.m_platform);
    builder.add_m_show_online_names(args.m_show_online_names);
    builder.add_m_your_telemetry(args.m_your_telemetry);
    builder.add_m_nationality(args.m_nationality);
    builder.add_m_race_number(args.m_race_number);
    builder.add_m_my_team(args.m_my_team);
    builder.add_m_team_id(args.m_team_id);
    builder.add_m_network_id(args.m_network_id);
    builder.add_m_driver_id(args.m_driver_id);
    builder.add_m_ai_controlled(args.m_ai_controlled);
    builder.finish()
  }


  #[inline]
  pub fn m_ai_controlled(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_AI_CONTROLLED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_driver_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_DRIVER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_network_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_NETWORK_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_team_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_TEAM_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_my_team(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_MY_TEAM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_race_number(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_RACE_NUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_nationality(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_NATIONALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_name(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ParticipantData::VT_M_NAME, None)}
  }
  #[inline]
  pub fn m_your_telemetry(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_YOUR_TELEMETRY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_show_online_names(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_SHOW_ONLINE_NAMES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_platform(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(ParticipantData::VT_M_PLATFORM, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ParticipantData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("m_ai_controlled", Self::VT_M_AI_CONTROLLED, false)?
     .visit_field::<u8>("m_driver_id", Self::VT_M_DRIVER_ID, false)?
     .visit_field::<u8>("m_network_id", Self::VT_M_NETWORK_ID, false)?
     .visit_field::<u8>("m_team_id", Self::VT_M_TEAM_ID, false)?
     .visit_field::<u8>("m_my_team", Self::VT_M_MY_TEAM, false)?
     .visit_field::<u8>("m_race_number", Self::VT_M_RACE_NUMBER, false)?
     .visit_field::<u8>("m_nationality", Self::VT_M_NATIONALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("m_name", Self::VT_M_NAME, false)?
     .visit_field::<u8>("m_your_telemetry", Self::VT_M_YOUR_TELEMETRY, false)?
     .visit_field::<u8>("m_show_online_names", Self::VT_M_SHOW_ONLINE_NAMES, false)?
     .visit_field::<u8>("m_platform", Self::VT_M_PLATFORM, false)?
     .finish();
    Ok(())
  }
}
pub struct ParticipantDataArgs<'a> {
    pub m_ai_controlled: u8,
    pub m_driver_id: u8,
    pub m_network_id: u8,
    pub m_team_id: u8,
    pub m_my_team: u8,
    pub m_race_number: u8,
    pub m_nationality: u8,
    pub m_name: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub m_your_telemetry: u8,
    pub m_show_online_names: u8,
    pub m_platform: u8,
}
impl<'a> Default for ParticipantDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    ParticipantDataArgs {
      m_ai_controlled: 0,
      m_driver_id: 0,
      m_network_id: 0,
      m_team_id: 0,
      m_my_team: 0,
      m_race_number: 0,
      m_nationality: 0,
      m_name: None,
      m_your_telemetry: 0,
      m_show_online_names: 0,
      m_platform: 0,
    }
  }
}

pub struct ParticipantDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ParticipantDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_m_ai_controlled(&mut self, m_ai_controlled: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_AI_CONTROLLED, m_ai_controlled, 0);
  }
  #[inline]
  pub fn add_m_driver_id(&mut self, m_driver_id: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_DRIVER_ID, m_driver_id, 0);
  }
  #[inline]
  pub fn add_m_network_id(&mut self, m_network_id: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_NETWORK_ID, m_network_id, 0);
  }
  #[inline]
  pub fn add_m_team_id(&mut self, m_team_id: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_TEAM_ID, m_team_id, 0);
  }
  #[inline]
  pub fn add_m_my_team(&mut self, m_my_team: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_MY_TEAM, m_my_team, 0);
  }
  #[inline]
  pub fn add_m_race_number(&mut self, m_race_number: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_RACE_NUMBER, m_race_number, 0);
  }
  #[inline]
  pub fn add_m_nationality(&mut self, m_nationality: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_NATIONALITY, m_nationality, 0);
  }
  #[inline]
  pub fn add_m_name(&mut self, m_name: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ParticipantData::VT_M_NAME, m_name);
  }
  #[inline]
  pub fn add_m_your_telemetry(&mut self, m_your_telemetry: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_YOUR_TELEMETRY, m_your_telemetry, 0);
  }
  #[inline]
  pub fn add_m_show_online_names(&mut self, m_show_online_names: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_SHOW_ONLINE_NAMES, m_show_online_names, 0);
  }
  #[inline]
  pub fn add_m_platform(&mut self, m_platform: u8) {
    self.fbb_.push_slot::<u8>(ParticipantData::VT_M_PLATFORM, m_platform, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ParticipantDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ParticipantDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ParticipantData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ParticipantData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ParticipantData");
      ds.field("m_ai_controlled", &self.m_ai_controlled());
      ds.field("m_driver_id", &self.m_driver_id());
      ds.field("m_network_id", &self.m_network_id());
      ds.field("m_team_id", &self.m_team_id());
      ds.field("m_my_team", &self.m_my_team());
      ds.field("m_race_number", &self.m_race_number());
      ds.field("m_nationality", &self.m_nationality());
      ds.field("m_name", &self.m_name());
      ds.field("m_your_telemetry", &self.m_your_telemetry());
      ds.field("m_show_online_names", &self.m_show_online_names());
      ds.field("m_platform", &self.m_platform());
      ds.finish()
  }
}
pub enum PacketParticipantsDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PacketParticipantsData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PacketParticipantsData<'a> {
  type Inner = PacketParticipantsData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PacketParticipantsData<'a> {
  pub const VT_M_NUM_ACTIVE_CARS: flatbuffers::VOffsetT = 4;
  pub const VT_M_PARTICIPANTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PacketParticipantsData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PacketParticipantsDataArgs<'args>
  ) -> flatbuffers::WIPOffset<PacketParticipantsData<'bldr>> {
    let mut builder = PacketParticipantsDataBuilder::new(_fbb);
    if let Some(x) = args.m_participants { builder.add_m_participants(x); }
    builder.add_m_num_active_cars(args.m_num_active_cars);
    builder.finish()
  }


  #[inline]
  pub fn m_num_active_cars(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(PacketParticipantsData::VT_M_NUM_ACTIVE_CARS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn m_participants(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ParticipantData<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ParticipantData>>>>(PacketParticipantsData::VT_M_PARTICIPANTS, None)}
  }
}

impl flatbuffers::Verifiable for PacketParticipantsData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("m_num_active_cars", Self::VT_M_NUM_ACTIVE_CARS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ParticipantData>>>>("m_participants", Self::VT_M_PARTICIPANTS, false)?
     .finish();
    Ok(())
  }
}
pub struct PacketParticipantsDataArgs<'a> {
    pub m_num_active_cars: u8,
    pub m_participants: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ParticipantData<'a>>>>>,
}
impl<'a> Default for PacketParticipantsDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    PacketParticipantsDataArgs {
      m_num_active_cars: 0,
      m_participants: None,
    }
  }
}

pub struct PacketParticipantsDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PacketParticipantsDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_m_num_active_cars(&mut self, m_num_active_cars: u8) {
    self.fbb_.push_slot::<u8>(PacketParticipantsData::VT_M_NUM_ACTIVE_CARS, m_num_active_cars, 0);
  }
  #[inline]
  pub fn add_m_participants(&mut self, m_participants: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ParticipantData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PacketParticipantsData::VT_M_PARTICIPANTS, m_participants);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketParticipantsDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PacketParticipantsDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PacketParticipantsData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PacketParticipantsData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PacketParticipantsData");
      ds.field("m_num_active_cars", &self.m_num_active_cars());
      ds.field("m_participants", &self.m_participants());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PacketParticipantsData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_participants_data_unchecked`.
pub fn root_as_packet_participants_data(buf: &[u8]) -> Result<PacketParticipantsData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PacketParticipantsData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PacketParticipantsData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_packet_participants_data_unchecked`.
pub fn size_prefixed_root_as_packet_participants_data(buf: &[u8]) -> Result<PacketParticipantsData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PacketParticipantsData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PacketParticipantsData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_participants_data_unchecked`.
pub fn root_as_packet_participants_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketParticipantsData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PacketParticipantsData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PacketParticipantsData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_participants_data_unchecked`.
pub fn size_prefixed_root_as_packet_participants_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketParticipantsData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PacketParticipantsData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PacketParticipantsData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PacketParticipantsData`.
pub unsafe fn root_as_packet_participants_data_unchecked(buf: &[u8]) -> PacketParticipantsData {
  flatbuffers::root_unchecked::<PacketParticipantsData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PacketParticipantsData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PacketParticipantsData`.
pub unsafe fn size_prefixed_root_as_packet_participants_data_unchecked(buf: &[u8]) -> PacketParticipantsData {
  flatbuffers::size_prefixed_root_unchecked::<PacketParticipantsData>(buf)
}
#[inline]
pub fn finish_packet_participants_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PacketParticipantsData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_participants_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PacketParticipantsData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod participants
}  // pub mod protos

